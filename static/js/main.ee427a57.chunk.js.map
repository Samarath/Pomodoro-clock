{"version":3,"sources":["Components/timerFunc.js","Components/clock.js","Containers/pomodoroApp.js","Custom Hook/intervalFunc.js","serviceWorker.js","index.js"],"names":["TimerFunction","props","name","className","Provider","value","onClick","func1","timer","func2","Clock","addZero","anotherOner","seconds","time","names","PomodoroClock","useState","breaktime","setBreakTime","sessionTime","setSessionTime","sessionSeconds","setSessionSeconds","pausePlay","setPausePlay","showTimer","setShowTimer","showBreakTime","setShowBreakTime","startStopBreakTime","setStartStopBreakTime","timerName","setTimerName","controls","setControls","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","preSession","preTime","pretime","preState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee427a57.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaArrowAltCircleUp, FaArrowAltCircleDown} from 'react-icons/fa';\r\nimport { IconContext } from \"react-icons\";\r\n\r\nconst TimerFunction = (props) => {\r\n    \r\n    return (\r\n        <>\r\n         <div>\r\n           <h2>{props.name} length</h2>\r\n           <div className='btns'>\r\n             <span>\r\n\r\n              <IconContext.Provider value={{className: 'icons'}}>\r\n                  \r\n                 <button onClick={props.func1}>\r\n                   <FaArrowAltCircleUp />\r\n                 </button>\r\n              </IconContext.Provider>\r\n              \r\n             </span>  \r\n\r\n             <p>{props.timer}</p>\r\n\r\n             <span>\r\n               <IconContext.Provider value={{className: 'icons'}}>\r\n\r\n                <button onClick={props.func2}>\r\n                  <FaArrowAltCircleDown/>\r\n                </button>\r\n               </IconContext.Provider>\r\n               \r\n             </span>  \r\n\r\n           </div>\r\n          </div> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TimerFunction;","import React from 'react';\r\n\r\nconst Clock = (props) => {\r\n  let addZero, anotherOner;\r\n  switch (props.seconds < 10) {\r\n    case props.seconds === 9:\r\n      addZero = '09';\r\n      break;\r\n   case props.seconds === 8:\r\n     addZero = '08';\r\n     break;\r\n   case props.seconds === 7:\r\n     addZero = '07';\r\n     break;\r\n   case props.seconds === 6:\r\n    addZero = '06';\r\n    break;  \r\n   case props.seconds === 5:\r\n    addZero = '05';\r\n    break;\r\n   case props.seconds === 4:\r\n    addZero = '04';\r\n    break;   \r\n   case props.seconds === 3:\r\n     addZero = '03'\r\n     break;\r\n  case props.seconds === 2:\r\n    addZero = '02';\r\n    break;\r\n  case props.seconds === 1:\r\n    addZero = '01';\r\n    break;\r\n  case props.seconds === 0:  \r\n    addZero = '00';\r\n    break;\r\n  default:\r\n    return;\r\n\r\n  }\r\n\r\n  switch (props.time < 10) {\r\n    case props.time === 9:\r\n      anotherOner = '09';\r\n      break;\r\n   case props.time === 8:\r\n     anotherOner = '08';\r\n     break;\r\n   case props.time === 7:\r\n     anotherOner = '07';\r\n     break;\r\n   case props.time === 6:\r\n    anotherOner = '06';\r\n    break;  \r\n   case props.time === 5:\r\n    anotherOner = '05';\r\n    break;\r\n   case props.time === 4:\r\n    anotherOner = '04';\r\n    break;   \r\n    case props.time === 3:\r\n     anotherOner = '03'\r\n     break;\r\n   case props.time === 2:\r\n    anotherOner = '02';\r\n    break;\r\n   case props.time === 1:\r\n    anotherOner = '01';\r\n    break;\r\n   case props.time === 0:  \r\n    anotherOner = '00';\r\n    break;\r\n\r\n   default:\r\n    return;  \r\n  }\r\n\r\n    return (\r\n        <div className='clock'>\r\n          <p>{props.names}</p>\r\n          <div className='counter'>\r\n             <span>{props.time < 10? anotherOner : props.time}</span>:<span>{props.seconds < 10? addZero: props.seconds }</span> \r\n          </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Clock;","import React, {useState} from 'react'\r\nimport TimerFunction from '../Components/timerFunc'\r\nimport Clock from '../Components/clock';\r\nimport {useInterval} from '../Custom Hook/intervalFunc';\r\nimport '../Styles/pomodoroApp.css';\r\nimport { FaPlay, FaSyncAlt, FaGripLinesVertical } from 'react-icons/fa';\r\nimport { IconContext } from \"react-icons\";\r\n\r\nconst PomodoroClock = () => {\r\n\r\n  const [breaktime, setBreakTime] = useState(5); //for changing break time\r\n  const [sessionTime, setSessionTime] = useState(25); //for changing session time\r\n  const [sessionSeconds, setSessionSeconds] = useState(0);// for changing session seconds\r\n  const [pausePlay, setPausePlay] = useState(false); //for start or stop timer\r\n  const [showTimer, setShowTimer] = useState(sessionTime); //for not changing the session timer with the timer\r\n  const [showBreakTime, setShowBreakTime] = useState(breaktime); //for not changing the break timer with the timer\r\n  const [startStopBreakTime, setStartStopBreakTime] = useState(true); //for swithing the time session to break\r\n  const [timerName, setTimerName] = useState('Session'); //for giving the name of clock session or break which is running at that time\r\n  const [controls, setControls] = useState(true);//for swithing names of session and break\r\n\r\n    useInterval(() => {\r\n\r\n      if(startStopBreakTime){\r\n\r\n        setSessionSeconds(preSession => {\r\n          if(preSession === 0){\r\n\r\n            setSessionTime(preTime => preTime === 0? preTime: preTime - 1);\r\n            setSessionSeconds(59); \r\n          }\r\n  \r\n          if(sessionTime <= 0 && sessionSeconds === 1){\r\n             setStartStopBreakTime(false);\r\n             setControls(false);\r\n             setTimerName('Break');\r\n             setBreakTime(showBreakTime);\r\n\r\n          }\r\n          return preSession - 1;\r\n        });\r\n\r\n      }else{\r\n        setSessionSeconds(preSession => {\r\n\r\n          if(preSession === 0){\r\n\r\n            setBreakTime(preTime => preTime === 0? preTime: preTime - 1);\r\n            setSessionSeconds(59); \r\n          }\r\n  \r\n          if(breaktime <= 0 && sessionSeconds === 1){\r\n\r\n             setStartStopBreakTime(true);\r\n             setControls(true);\r\n             setTimerName('Session');\r\n             setSessionTime(showTimer); \r\n          }\r\n          return preSession - 1;\r\n        });\r\n      }\r\n  }, pausePlay? 1000: null);\r\n  \r\n\r\n  const increaseTime = () => {\r\n    setBreakTime((pretime) =>{\r\n         if(!pausePlay){\r\n\r\n            if(pretime < 60){\r\n\r\n            if(!controls){\r\n               setSessionSeconds(0);\r\n             }\r\n            setShowBreakTime(pretime + 1);\r\n            return pretime + 1\r\n         }\r\n         if(!controls){\r\n          setSessionSeconds(0);\r\n        }\r\n         setShowBreakTime(pretime);\r\n          return pretime;\r\n      }\r\n      return pretime;\r\n      });\r\n  }\r\n\r\n\r\n  const decreaseTime = () => {\r\n    setBreakTime((pretime) => {\r\n      if(!pausePlay){\r\n\r\n          if(pretime > 1){\r\n\r\n            if(!controls){\r\n              setSessionSeconds(0);\r\n            }\r\n            setShowBreakTime(pretime - 1);\r\n            return pretime - 1;\r\n          }\r\n          if(!controls){\r\n            setSessionSeconds(0);\r\n          }\r\n          setShowBreakTime(pretime);\r\n          return pretime;\r\n      }\r\n      return pretime;\r\n      \r\n    });\r\n  }\r\n\r\n  const increaseSessionTimer = () => {\r\n    \r\n    setSessionTime((pretime) =>{\r\n \r\n      if(!pausePlay){\r\n        if(pretime < 60){\r\n          if(controls){\r\n            setSessionSeconds(0);\r\n          }\r\n          setShowTimer(pretime + 1);\r\n          return pretime + 1\r\n        }\r\n        if(controls){\r\n          setSessionSeconds(0);\r\n        }\r\n        setShowTimer(pretime);\r\n        return pretime;\r\n      }  \r\n      return pretime;\r\n\r\n      });\r\n  }\r\n\r\n  const decreaseSessionTimer =() => {\r\n    \r\n    setSessionTime((pretime) =>{\r\n\r\n      if(!pausePlay){\r\n        if(pretime > 1){\r\n          if(controls){\r\n            setSessionSeconds(0);\r\n          }\r\n          setShowTimer(pretime - 1);\r\n          return pretime - 1\r\n        }\r\n        if(controls){\r\n          setSessionSeconds(0);\r\n        }\r\n        setShowTimer(pretime);\r\n        return pretime;\r\n      }\r\n      return pretime;\r\n\r\n      });\r\n  }\r\n\r\n  const playPauseTime = () => {\r\n    setPausePlay( preState => !preState)\r\n  }\r\n\r\n  const reset = () => { //for reset everything in clock and all the functions\r\n    setShowBreakTime(5);\r\n    setBreakTime(5);\r\n    setSessionTime(25);\r\n    setPausePlay(false);\r\n    setSessionSeconds(0);\r\n    setStartStopBreakTime(true);\r\n    setTimerName('Session');\r\n    setShowTimer(25);\r\n    setControls(true);\r\n  }\r\n\r\n    return (\r\n        <div id='main'>\r\n\r\n          <h1>Pomodoro Clock</h1>\r\n          <div id='timer'>\r\n\r\n            <TimerFunction \r\n            name='Break'\r\n            func1={increaseTime}\r\n            func2={decreaseTime}\r\n            timer={showBreakTime}\r\n            pausePlay={pausePlay}\r\n            />\r\n            <TimerFunction\r\n             name='Session'\r\n             func1={increaseSessionTimer}\r\n             func2={decreaseSessionTimer}\r\n             timer={showTimer}\r\n             pausePlay={pausePlay}\r\n             />\r\n\r\n          </div>\r\n\r\n          <Clock\r\n           time={controls? sessionTime: breaktime}\r\n           seconds={sessionSeconds}\r\n           names={timerName}\r\n           />\r\n          <div className='mainbtns'>\r\n          <IconContext.Provider value={{className: 'icons'}}>\r\n\r\n            <button onClick={playPauseTime}>\r\n               {pausePlay? <FaGripLinesVertical />: <FaPlay />} \r\n            </button>\r\n\r\n            <button onClick={reset}>           \r\n               <FaSyncAlt />\r\n            </button>\r\n          </IconContext.Provider> \r\n          </div>\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PomodoroClock;","import {useEffect, useRef} from 'react';\r\n\r\nexport const useInterval = (callback, delay) => {\r\n    const savedCallback = useRef();\r\n\r\n    // Remember the latest function.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PomodoroClock from './Containers/pomodoroApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <PomodoroClock />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}